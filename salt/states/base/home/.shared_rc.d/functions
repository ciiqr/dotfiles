#!/usr/bin/env bash

inplace-replace() {
    # TODO: This can probably be improved, or at least better documented...
    sed -i "s/$(echo $1 | sed -e 's/\([[\/.*]\|\]\)/\\&/g')/$(echo $2 | sed -e 's/[\/&]/\\&/g')/g" $3
}

watch-process-time() {
    watch -n 1 "ps -eo etime,command | grep $1 | grep -v grep"
}

rec-readlink() {
    find . -type l -print0 | while IFS= read -r -d $'\0' file; do
        echo -n "$file "
        readlink "$@" "$file"
    done
}

generate-pem() {
    declare name="$1"
    if [[ -z "$name" ]]; then
        echo "usage: ${FUNCNAME[0]:-$funcstack[1]} key-name"
        return 1
    fi

    # RSA Private Key
    openssl genrsa -out "$name".pem 4096

    # OpenSSL public key
    # openssl rsa -in "$name".pem -pubout > "$name".pub

    # OpenSSH public key
    chmod 0600 "$name".pem
    \ssh-keygen -y -f "$name".pem > "$name".pub
}

generate-rsa() {
    declare name="$1"
    if [[ -z "$name" ]]; then
        echo "usage: ${FUNCNAME[0]:-$funcstack[1]} key-name"
        return 1
    fi

    \ssh-keygen -t rsa -b 4096 -o -N "" -f "$name" -C "$name"
}

largest()
{
    if [[ "$#" -eq 0 ]]; then
        sudo du -sh ./{,.}* 2>&1 | egrep -v '(^[0-9\.]+K|^0\s|No such file or directory)' | sort -h
    else
        sudo du -sh "$@" 2>&1 | egrep -v '(^[0-9\.]+K|^0\s|No such file or directory)' | sort -h
    fi
}

smallest()
{
    if [[ "$#" -eq 0 ]]; then
        sudo du -sh .* * 2>&1 | egrep '^([0-9\.]+K|0\s)' | sort -hr
    else
        sudo du -sh "$@" 2>&1 | egrep '^([0-9\.]+K|0\s)' | sort -hr
    fi
}

notify-complete()
{
    # TODO: add osx support
    local cmd="$@"
    $@ && notify-send "$cmd" "Complete" || notify-send "$cmd" "Failed"
}

until_failure()
{
    declare retCode=0
    declare temp="`mktemp`"
    declare count=0

    while [[ "$retCode" == "0" ]]; do
        "$@" >"$temp" 2>&1
        retCode="$?"

        clear
        cat "$temp"
        if [[ $temp != *$'\n' ]]; then
            echo
        fi

        if [[ "$retCode" == "0" ]]; then
            ((count++))
            tput setab 2
            echo -n "$count runs without failure"
            tput sgr0
            echo ": $@"
        fi
    done

    tput setab 1
    echo -n "$count runs without failure"
    tput sgr0
    echo ": $@"
}

while_failing()
{
    declare retCode=1
    declare temp="`mktemp`"
    declare count=0

    while [[ "$retCode" != "0" ]]; do
        "$@" >"$temp" 2>&1
        retCode="$?"

        clear
        cat "$temp"

        if [[ "$retCode" != "0" ]]; then
            ((count++))
            tput setab 1
            echo -n "$count runs without success"
            tput sgr0
            echo ": $@"
        fi
    done

    tput setab 2
    echo -n "$count runs without success"
    tput sgr0
    echo ": $@"
}

healthcheck()
{
    # NOTE: test with: healthcheck 1 bash -c 'exit $(( $RANDOM & 1 ))'
    # TODO: it would be nice to have a summary if the time every once in a while (maybe just based on the width of the column)
    declare retCode=1
    declare count=0
    declare previous=up
    # TODO: decide between ($COLUMNS - date width - spacing) & 60,
    # declare width=$(($COLUMNS-20))
    declare width=60

    while true; do
        sleep_then "$@" >/dev/null 2>&1
        retCode="$?"

        ((count++))
        if [[ "$retCode" == "0" ]]; then
            # up
            tput setab 2
            echo -n "."
            tput sgr0

            if [[ $previous != "up" ]]; then
                send_notification 'UP' "$(echo "${@:2}")"
                previous=up
            fi
        else
            # down
            tput setab 1
            echo -n "x"
            tput sgr0

            if [[ $previous != "down" ]]; then
                send_notification 'DOWN' "$(echo "${@:2}")"
                previous=down
            fi
        fi

        if (( $count % $width == 0 )); then
            echo -n ' '
            date '+%Y-%m-%d %H:%M:%S'
        fi
    done
}

print_x()
{
    # ie. print_x 10 2
    # 2222222222

    local x="$1"
    shift
    while ((x--)); do
        echo -n "$@"
    done

    echo
}

print_seq()
{
    # ie. print_seq 2 5
    # 2
    # 3
    # 4
    # 5

    # ie. print_seq 5 2 3
    # 5
    # 2

    local x="$1"
    local y="$2"
    local skip="$3"

    if [[ -z "$skip" ]]; then
        skip=1
    fi

    if ((x > y)); then
        # counting down
        while ((x >= y)); do
            echo "$x"
            ((x -= skip))
        done
    else
        # counting up
        while ((x <= y)); do
            echo "$x"
            ((x += skip))
        done
    fi
}

pomo()
{
    declare minutes="$1"
    declare i="0"

    if [[ -z "$minutes" ]]; then
        minutes="15"
    fi

    if ! type "send_notification" >/dev/null 2>&1; then
        echo "$0: send_notification not configured for this platform"
        exit 1
    fi

    # TODO: consider supporting alternating sleep times (ie. 15m/5m/15m/5m/etc)
    while true; do
        sleep $((minutes * 60))
        ((i++))
        send_notification "$i" "POMO"
    done
}

mime-type()
{
    if command-exists xdg-mime; then
        if [[ $# == 1 ]]; then
            xdg-mime query filetype "$1"
        else
            for file in "$@"; do
                echo "$file: $(xdg-mime query filetype "$file")"
            done
        fi
    else
        file --mime-type "$@"
    fi
}

bak() {
    # TODO: check params`
    cp -a "$1" "$1.bak"
}

unbak() {
    # TODO: check params
    cp -a "$1.bak" "$1"
}

top-n-by-count()
{
    declare CHAR="/"
    declare base="${1%/}/"
    declare n="${2:-0}"

    # count is relative to path, and defaults to show children of path
    n=$(awk -F"$CHAR" '{print NF+'"$n"'}' <<< "${base}")

    # split on /, get n parts, and count
    cut -d"$CHAR" -f 1-"$n" | sort | uniq -c | sort -h
}

locate-top-n-by-count()
{
    declare base="${1%/}/"
    declare n="$2"
    # TODO: check params
    locate "$base" | top-n-by-count "$base" "$n"
}
find-top-n-by-count()
{
    declare base="${1%/}/"
    declare n="$2"
    # TODO: check params
    sudo find "$base" | top-n-by-count "$base" "$n"
}

macro()
{
    (source macro "$@")
}

mkcd()
{
    mkdir -p "$1" && cd "$1"
}

codepoint()
{
    # Get a character’s Unicode code point
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi
}

# Call from a local repo to open the repository on github/bitbucket in browser
# Modified version of https://github.com/zeke/ghwd
repo() {
    # Figure out github repo base URL
    local base_url
    base_url=$(git config --get remote.origin.url)
    base_url=${base_url%\.git} # remove .git from end of string

    # Fix git@github.com: URLs
    base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

    # Fix git://github.com URLS
    base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

    # Fix git@bitbucket.org: URLs
    base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

    # Fix git@gitlab.com: URLs
    base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

    # Validate that this folder is a git folder
    if ! git branch 2>/dev/null 1>&2 ; then
        echo "Not a git repo!"
        exit $?
    fi

    # Find current directory relative to .git parent
    full_path=$(pwd)
    git_base_path=$(cd "./$(git rev-parse --show-cdup)" || exit 1; pwd)
    relative_path=${full_path#$git_base_path} # remove leading git_base_path from working directory

    # If filename argument is present, append it
    if [ "$1" ]; then
        relative_path="$relative_path/$1"
    fi

    # Figure out current git branch
    # git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
    git_where=$(command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null

    # Remove cruft from branchname
    branch=${git_where#refs\/heads\/}

    [[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
    url="$base_url/$tree/$branch$relative_path"


    open "$url" &> /dev/null || (echo "Using $(type open) to open URL failed." && exit 1);
}

gcd()
{
    declare root="$(git rev-parse --show-toplevel)"
    if [[ -n "$root" ]]; then
        cd "${root}/${@}"
    else
        cd "$@"
    fi
}

b64()
{
    {
        if [[ "$#" -gt 0 ]]; then
            echo "$@"
        else
            cat
        fi
    } | base64 -w0
    echo
}

b64d()
{
    {
        if [[ "$#" -gt 0 ]]; then
            echo "$@"
        else
            cat
        fi
    } | base64 -d
    echo
}

# basic woof replacement for systems without an official woof package
yeet()
{
    {
        echo -ne "HTTP/1.0 200 OK\r\n"
        echo -ne "Content-Length: $(wc -c <"$1")\r\n"
        echo -ne "Content-Disposition: inline; filename=\"$(basename "$1")\"\r\n"
        echo -ne "\r\n"
        cat "$1"
    } | nc -l -p 8080
}

external()
{
    declare repo="$1"
    if [[ -z "$repo" ]]; then
        echo "usage: $0 <repo>"
        return 1
    fi

    # extract directory path from repo
    declare directory="$(sed -r 's#^(https?://|git@)[^/:]+[/:]([^.]+)(\.git)?$#\2#g' <<< "$repo")"

    # clone to ~/External
    git clone "$repo" "${HOME}/External/${directory}"
}

echo_style()
{
    # USAGE: echo_style 'red,blue_bg' "me"

    # NOTE: the echo is to make this split on IFS in zsh also
    local IFS=,
    for style in $(echo "$1"); do
        declare -a command=()
        case "$style" in
            # foreground colour
            black)
                command+=('setaf' '0');;
            red)
                command+=('setaf' '1');;
            green)
                command+=('setaf' '2');;
            yellow)
                command+=('setaf' '3');;
            blue)
                command+=('setaf' '4');;
            magenta)
                command+=('setaf' '5');;
            cyan)
                command+=('setaf' '6');;
            white)
                command+=('setaf' '7');;
            # background colour
            black_bg)
                command+=('setab' '0');;
            red_bg)
                command+=('setab' '1');;
            green_bg)
                command+=('setab' '2');;
            yellow_bg)
                command+=('setab' '3');;
            blue_bg)
                command+=('setab' '4');;
            magenta_bg)
                command+=('setab' '5');;
            cyan_bg)
                command+=('setab' '6');;
            white_bg)
                command+=('setab' '7');;
            *)
                # allows other tput commands (ie. bold, smul, etc)
                command+=("$style")
        esac
        tput "${command[@]}"
    done

    echo "${@:2}"
    tput sgr0
}

calc() {
    # TODO: consider importing some math libs
    python -c "print($*)"
}
