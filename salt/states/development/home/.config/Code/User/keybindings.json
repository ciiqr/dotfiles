// DOCS: when clause contexts: https://code.visualstudio.com/api/references/when-clause-contexts
// TODO: move to a linux specific location
[
    // sane tabbing
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor"
    },
    // escape dismiss sidebar
    {
        "key": "escape",
        "command": "workbench.action.closeSidebar",
        "when": "sideBarVisible && activeViewlet == 'workbench.view.search' || activeViewlet == 'workbench.view.extensions'"
    },
    // goto symbol
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.showAllSymbols"
    },
    // transpose
    {
        "key": "ctrl+t",
        "command": "extension.transpose"
    },
    // make sidebar keybindings toggle instead of just show
    {
        "key": "ctrl+shift+x",
        "command": "workbench.action.closeSidebar",
        "when": "activeViewlet == 'workbench.view.extensions'"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.closeSidebar",
        "when": "activeViewlet == 'workbench.view.explorer'"
    },
    {
        "key": "ctrl+shift+d",
        "command": "workbench.action.closeSidebar",
        "when": "activeViewlet == 'workbench.view.debug'"
    },
    // move lines
    {
        "key": "ctrl+shift+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    // insert cursor on each selected line
    {
        "key": "ctrl+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    // search - open in editor
    {
        "key": "enter",
        "command": "search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    }
]
