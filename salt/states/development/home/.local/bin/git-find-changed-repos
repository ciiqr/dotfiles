#!/usr/bin/env bash

set -e

. ~/.scripts/libs/output.sh

# TODO: clean up, add proper --* args, --help usage examples
# git-find-changed-repos [--porcelain] [--diff] [<directory>...]
# git-find-changed-repos ~/Projects

if [[ -t 1 ]]; then
    declare shouldColour='true'
else
    declare shouldColour='false'
fi

# colour output
declare -a gitArgs=()
if [[ "$shouldColour" == 'true' ]]; then
    gitArgs+=('-c' 'color.status=always')
fi

# TODO: consider optimizing to not search in subdirectories of git repos (probs optionally still do tho)
# https://stackoverflow.com/questions/11981716/how-to-quickly-find-all-git-repos-under-a-directory

# find all git repos
while IFS= read -r -d $'\0' dotGit; do
    declare repoDir="$(dirname "$dotGit")"

    # if any files changed or untracked
    if [[ "$(git -C "$repoDir" status --porcelain 2>/dev/null)" != "" ]]; then
        # print repo directory header
        output::header "${repoDir/#${HOME}/'~'}"

        # TODO: add a --porcelain option and add it here
        declare -a gitStatusArgs=()

        # git status
        git -C "$repoDir" "${gitArgs[@]}" status "${gitStatusArgs[@]}" | output::indent
        # TODO: git diff option, --color=always if shouldColour == 'true'
        # git -C "$repoDir" "${gitArgs[@]}" diff "${gitStatusArgs[@]}" | output::indent
    fi
done < <(
    find "${@:-.}" \
        -name .git -type d -prune -print0 \
        -o -name .terragrunt-cache -type d -prune \
        -o -name .stversions -type d -prune
)
