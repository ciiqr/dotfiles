#!/usr/bin/env bash

set -e

. ~/.scripts/lib/output.sh

usage()
{
    echo 'usage: git-find-changed-repos [--porcelain|--diff] [<directory>...]'
    echo '   ie. git-find-changed-repos ~/Projects'
}

error()
{
    echo "git-find-changed-repos:" "$@" 1>&2
}

parse_args()
{
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --porcelain)
                porcelain='true'
            ;;
            --diff)
                diff='true'
            ;;
            -h|--help)
                usage
                exit 0
            ;;
            -*)
                error "Unrecognized option $1"
                return 1
            ;;
            *)
                # positional args are assumed to be directories to search through
                directories+=("$1")
            ;;
        esac
        shift
    done
}

validate_args()
{
    if [[ "$porcelain" == 'true' && "$diff" == 'true' ]]; then
        error 'Invalid use of mutually exclusive args --porcelain and --diff'
        echo
        usage
        return 1
    fi
}

declare porcelain='false'
declare diff='false'
declare -a directories=()

parse_args "$@"
validate_args

if [[ -t 1 ]]; then
    declare shouldColour='true'
else
    declare shouldColour='false'
fi

# colour output
declare -a gitArgs=()
if [[ "$shouldColour" == 'true' ]]; then
    gitArgs+=('-c' 'color.status=always')
fi

# TODO: consider optimizing to not search in subdirectories of git repos (probs optionally still do tho)
# https://stackoverflow.com/questions/11981716/how-to-quickly-find-all-git-repos-under-a-directory

# find all git repos
while IFS= read -r -d $'\0' dotGit; do
    declare repoDir="$(dirname "$dotGit")"

    # if any files changed or untracked
    if [[ "$(git -C "$repoDir" status --porcelain 2>/dev/null)" != "" ]]; then
        # print repo directory header
        output::header "${repoDir/#${HOME}/'~'}"

        if [[ "$diff" == 'true' ]]; then
            # subcommand args
            declare -a gitDiffArgs=()
            if [[ "$shouldColour" == 'true' ]]; then
                gitDiffArgs+=('--color=always')
            fi

            # git diff
            git -C "$repoDir" "${gitArgs[@]}" diff "${gitDiffArgs[@]}" | output::indent
        else
            # subcommand args
            declare -a gitStatusArgs=()
            if [[ "$porcelain" == 'true' ]]; then
                gitStatusArgs+=('--porcelain')
            fi

            # git status
            git -C "$repoDir" "${gitArgs[@]}" status "${gitStatusArgs[@]}" | output::indent
        fi
    fi
done < <(
    find "${directories[@]:-.}" \
        -name .git -type d -prune -print0 \
        -o -name .terragrunt-cache -type d -prune \
        -o -name .stversions -type d -prune
)
