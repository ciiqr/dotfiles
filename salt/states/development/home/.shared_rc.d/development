#!/usr/bin/env bash

# git
if command-exists git; then
    alias git-diff-shortstat='git diff --shortstat'
    alias git-assume-unchanged='git update-index --assume-unchanged'
    alias git-no-assume-unchanged='git update-index --no-assume-unchanged'
    alias git-list-assume-unchanged='git ls-files -v | grep "^[[:lower:]]"'
    git-repos-exec()
    {
        declare dotGit

        find . -name .git -type d -prune -print0 \
            -o -name .terragrunt-cache -type d -prune \
            -o -name .stversions -type d -prune \
        | while IFS= read -r -d $'\0' dotGit; do
            declare repoDir="$(dirname "$dotGit")"
            pushd "$repoDir/" > /dev/null

            # repo name
            output::header "${repoDir/#${HOME}/'~'}"

            # exec
            eval "$@" | output::indent
            popd > /dev/null
        done
    }
fi

# Kubernetes
if command-exists kubectl; then
    alias k=kubectl

    # NOTE: excludes events
    alias kubectl-all-resources='printf '%s' "$(kubectl api-resources --verbs=list --namespaced -o name | grep -v -e "^events.events.k8s.io$" -e "^events$")" | tr $"\n" ","'
    alias kubectl-get-all='kubectl get "$(kubectl-all-resources)"'

    alias pk=pkubectl
    pkubectl()
    {
        # essentially pssh but for k8s clusters
        # TODO: Consider clusters not being positional (ie. more like pssh's -h -H args)
        # ie. pkubectl 'gke_scorebet-staging_us-west2_cockroachdb-us-west2 gke_scorebet-staging_us-central1_cockroachdb-us-central1' get ns

        # TODO: use 'parallel' to be able to run each in parallel
        # NOTE: the echo is to make this split on space in zsh also
        for context in $(echo "$1"); do
            output::echo 'blue' "==> ${context}"
            kubectl --context "$context" "${@:2}"
        done
    }
    krun()
    {
        if [[ "$#" -lt 1 ]]; then
            echo 'usage: krun <image> [<kubectl-options-or-commands>...]' 1>&2
            return 1
        fi

        declare image="$1"
        declare -a args=()
        declare has_command='false'

        # TODO: surely there's a less messy way of doing all this
        # krun redis
        # krun redis sh
        # krun redis -- sh
        # krun redis -n istio-system
        # krun redis -n istio-system sh # expected to break
        # krun redis -n istio-system -- sh
        if [[ "$#" -ge 2 && "$2" != '-'* ]]; then
            # has a command first: at least one arg after image, and it's not an option
            # ie. krun redis sh
            args+=('--')
            args+=("${@:2}")
        else
            # has args or separator first
            # ie. krun redis -- sh
            # ie. krun redis -n istio-system
            for arg in "${@:2}"; do
                args+=("$arg")
                # NOTE: technically there may not be a command after the --, but tbh who gonna write -- at the end and nothing after it... :p (laziness)
                if [[ "$arg" == '--' ]]; then
                    has_command='true'
                fi
            done

            # add command after args
            if [[ "$has_command" != 'true' ]]; then
                # run bash if it's available, fallback to sh
                args+=('--' 'sh' '-c' 'if type bash >/dev/null 2>&1; then bash; else sh; fi')
            fi
        fi

        # TODO: detect & kill istio sidecar...
        # TODO: consider: running 'sleep 86400' and then kube exec -it 'args...' (this way commands run don't show up in logs, especially useful if passwords are involved)

        # run
        kubectl --generator=run-pod/v1 run william-testing-$(epoch) --rm -it --restart=Never --image "$image" "${args[@]}"
    }
    kubeconf-import()
    {
        # usage: kubeconf-import ~/some-kubeconfig ~/other-kubeconfig
        declare kubeconfig="$HOME/.kube/config$(printf "%s" "${@/#/:}")"

        # TODO: fix \kubectl (required to work alongside ts-toolbox)
        # NOTE: writing to a var instead of the file directly because > will wipe the file before it can be read by kubectl
        declare new_config="$(KUBECONFIG="$kubeconfig" \kubectl config view --flatten)"

        cat > ~/.kube/config <<< "$new_config"
    }
fi
if command-exists kubectx; then
    alias ktx=kubectx
fi

# Docker
if command-exists docker; then
    alias drun='docker run --rm -it'
fi

if command-exists docker-compose; then
    alias dc=docker-compose
fi

# Vagrant
if command-exists vagrant; then
    alias vag='vagrant'
fi

# Terraform
if command-exists terraform; then
    alias tf='terraform'
fi

# Salt
if command-exists salt-call; then
    alias sc='sudo salt-call'
fi

# BPython
if command-exists bpython2; then
    alias bp='bpython2'
    alias bp2='bpython2'
fi
if command-exists bpython; then
    alias bp3='bpython'
fi

# Nim
if command-exists nim; then
    alias nim='nim --nimcache=.nimcache'
fi

# SystemD
if command-exists switch-to-systemd; then
    alias switch-to-systemd='. switch-to-systemd'
fi

# XEV Keys
if command-exists xev; then
    alias xev='xev -rv -name xev-is-special'
    alias xev-keys="xev | grep -A2 --line-buffered '^KeyRelease' | sed -n '/keycode /s/^.*keycode \([0-9]*\).* (.*, \(.*\)).*$/\1 \2/p'"
fi
# xprop
if command-exists xprop; then
    alias xprop="xprop | grep -v ^$'\t[^\w\t]' | tr -s '\n'"
    # window info
    alias window-info='xprop; xwininfo'
fi

if command-exists scanelf; then
    symbol-provider()
    {
        scanelf -l -s "$1" | grep "$1"
    }
fi

if command-exists cmake; then
    alias cmake-debug='cmake -DCMAKE_BUILD_TYPE=Debug'
    alias cmake-release='cmake -DCMAKE_BUILD_TYPE=Release'
fi

# gpg
export GPG_TTY=$(tty)
