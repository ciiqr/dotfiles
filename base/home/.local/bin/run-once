#!/usr/bin/env bash

# Usage Examples

# - Run as current user
# run-once subl
# run-once -u $USER subl

# - Run as another user
# run-once -u bob subl

# - Run as Root
# run-once sudo subl
# run-once -u root subl

# NOTES: 
#	- Will return SUCCESS ONLY if it runs the command (irrelevant of it's return value)

# State
# DEBUG=true
# echo "$@" >> ~/FUCK

# Constants
FAILURE=1
SUCCESS=0

# Functions
usage()
{
	echo "run-once [-u <user>] <command> [<arg>]..."
	exit $FAILURE
}

# Ensure 1- arguments are supplied
if [[ $# -eq 0 ]]; then
	usage
else # Run
	
	# Check if user-name is supplied
	if [[ "$1" == "-u" ]]; then
		if [[ -z "$2" ]]; then
			usage
		else
			username="$2"
		fi
		
		commandToRun="${@:3}" # Ignore the first few arguments
	else # Figure out if root user from command
		
		# Get first part of command
		arr=($@)
		firstPartOfCommand=${arr[0]}
		
		# Check command to see if it starts with sudo OR gksudo
		if [[ $firstPartOfCommand == "sudo" ]] ||
		   [[ $firstPartOfCommand == "gksudo" ]]; then
			
			# Will run as root & ignore the existing (gk)sudo in the command
			username="root"
			commandToRun="${@:2}"
		else
			# Will run as the current user
			username="$USER"
			commandToRun=$@
		fi
	fi
	
	# Ensure a command was passed
	if [[ -z "$commandToRun" ]]; then
		usage
	fi
	
	# TODO: The below is likely not perfect
	arr=($commandToRun)
	programName=${arr[0]}
	
	# Check if it's running
	is-running $programName $username
	if [[ $? -eq 0 ]]; then
		# Already Running
		exit $FAILURE
	else
		# NOT Running
		
		# Run
		# TODO: Decide if this should really be in the background...
		(gksudo -u $username $commandToRun &)
		
		exit $SUCCESS
	fi
fi
