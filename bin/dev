#!/usr/bin/env bash

set -e

declare script_dir
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
declare repo_dir
repo_dir="$(dirname "$script_dir")"

# load rtx environment (in case we're run from outside the project directory)
eval "$(cd "$repo_dir" && rtx hook-env 2>/dev/null)"

dev::usage() {
    echo 'usage: dev <command>'
    echo '       dev lint      # run linters'
    echo '       dev lint fix  # run linters'
    exit 1
}

dev::shfmt() {
    shfmt \
        --case-indent \
        --binary-next-line \
        --indent 4 "$@"
}

dev::lint() {
    cd "$repo_dir"

    # TODO: not sure why this find wasn't working joined with an -o (wasn't finding a *.sh script without a shebang)
    readarray -t bash_sh_files <<<"$(
        {
            find . -name '.git' -prune -o -iname '*.sh' -print
            find . -name '.git' -prune -o -type f -exec grep -il '#!/usr/bin/env bash' '{}' ';' -print
        } \
            | sort \
            | uniq
    )"

    shellcheck "${bash_sh_files[@]}"

    # TODO: dedup with above?
    readarray -t shell_files <<<"$(
        {
            find . -name '.git' -prune -o -iname '*.sh' -print
            find . -name '.git' -prune -o -type f -exec grep -il '#!/usr/bin/env bash' '{}' ';' -print
            find . -name '.git' -prune -o -type f -exec grep -il '#!/usr/bin/env zsh' '{}' ';' -print
        } \
            | sort \
            | uniq
    )"

    # TODO: it also needs to find files like above...
    dev::shfmt \
        --diff \
        "${shell_files[@]}"
}

dev::lint::fix() {
    cd "$repo_dir"

    # TODO: dedup with above?
    readarray -t shell_files <<<"$(
        {
            find . -iname '*.sh'
            find . -type f -exec grep -il '#!/usr/bin/env bash' '{}' ';'
            find . -type f -exec grep -il '#!/usr/bin/env zsh' '{}' ';'
        } \
            | sort \
            | uniq
    )"

    # TODO: it also needs to find files like above...
    dev::shfmt \
        --write \
        "${shell_files[@]}"
}

# TODO: switch to a more standard command parser once we actually need something dynamic
case "$*" in
    'lint') dev::lint ;;
    'lint fix') dev::lint::fix ;;
    *) dev::usage ;;
esac
